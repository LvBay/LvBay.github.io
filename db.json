{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1519706543818},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1519706543818},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1519706543818},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1519706543818},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1519706543818},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1519706543818},{"_id":"source/_posts/nsqd-mysql保存消息历史.md","hash":"d9ee4cf89235ddc0c39bf0bf00560f2470434f5e","modified":1519706543818},{"_id":"source/tags/index.md","hash":"40d3391c41d3ec0a8eda2cb9ab2b3c8b7bfc42de","modified":1519706543818},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1519706543818},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1519706543818},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1519706543818},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1519706543818},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1519706543818},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1519706543818},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1519706543818},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1519706543818},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1519706543818},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1519706543818},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1519706543818},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1519706543818},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1519706543818},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1519706543818},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1519706543818},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1519706543818},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1519706543818},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1519706543818},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1519706543818},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1519706543818},{"_id":"source/_posts/nsqd-mysql保存消息历史/nsqd.png","hash":"de830176efbf48a05d025c0e11f5a60599edf4e3","modified":1519706543818},{"_id":"source/_posts/nsqd-mysql保存消息历史/znsq_dir.png","hash":"aa1f1a38ea276ce05e3c77b1cb4d2e92fedd9d52","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1519706543818},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1519706543818},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1519706543818},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1519706543818},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1519706543818},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1519706543818},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1519706543818},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1519706543818},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1519706543822},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1519706543822},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1519706543818},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1519706543818},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1519706543818},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1519706543818},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1519706543818},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1519706543818},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1519706543818},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1519706543818},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1519706543818},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1519706543818},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1519706543818},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1519706543818},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1519706543818},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1519706543818},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1519706543818},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1519706543818},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1519706543822},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1519706543822},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1519706543822},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1519706543822},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1519706543822}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2018-02-26T08:30:34.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-02-26 16:30:34\ntype: \"tags\"\n---\n","updated":"2018-02-27T04:42:23.818Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cje56yeh10000r0x4hn1imlpp","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"nsqd+mysql保存消息历史","date":"2018-02-26T07:33:48.000Z","_content":"{% asset_img nsqd.png nsqd消息分发流程%}\n\n## 改造原因\nnsqd自带消息持久化特性（nsqd的消费者因为某些原因断掉，在重新连接后仍然可以继续消费）。团队使用nsqd作为消息队列时，遇到一些问题：虽然nsqd自带消息持久化特性（nsqd的消费者因为某些原因断掉，在重新连接后仍然可以继续消费），也可以通过nsqadmin管理页面查看nsq各个节点的运行情况，但无法了解具体某个消息的生命周期。如果能将nsqd的推送记录和消费记录保存在mysql中，则可以解决痛点。\n\n## 尝试解决方案\n### 方案1：对go-nsq进行简单封装\n\n- 在gopath下,新建znsq目录,作为项目包\n{% asset_img znsq_dir.png znsq项目目录%}\n\n- 对生产者的封装\n```\npackage znsq\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"znsq/models\"\n\n\t\"github.com/astaxie/beego/orm\"\n\t\"github.com/nsqio/go-nsq\"\n)\n\ntype Producer struct {\n\tP *nsq.Producer\n}\n\n// 初始化生产者\nfunc NewProducer(addr string, mysql string) (wr *Producer) {\n\tvar err error\n\tcfg := nsq.NewConfig()\n\tp, err := nsq.NewProducer(addr, cfg)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tp.SetLogger(log.New(os.Stdout, \"nsq:\", 0), nsq.LogLevelInfo)\n\twr = &Producer{P: p}\n\torm.RegisterDataBase(\"default\", \"mysql\", mysql, 10, 10) // 注册数据库\n\treturn wr\n}\n\n// 对go-nsq的Publish方法封装\nfunc (p *Producer) Publish(topic string, body []byte) error {\n\tgo p.PublishLog(topic, body) // 添加日志\n\treturn p.P.Publish(topic, body)\n}\n\nfunc (p *Producer) PublishLog(topic string, body []byte) (int64, error) {\n\tlog := &models.NsqPublishLog{}\n\t// log.MessageId = \"\" // 因为messageId由nsqd生成,所以这里还无法获取messageId\n\tlog.Message = string(body)\n\tlog.NsqdUrl = p.P.String()\n\tlog.Topic = topic\n\treturn models.AddNsqPublishLog(log)\n}\n```\n\n- 对消费者的封装\n```\npackage znsq\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"znsq/models\"\n\n\t\"github.com/astaxie/beego/orm\"\n\t_ \"github.com/go-sql-driver/mysql\"\n\tnsq \"github.com/nsqio/go-nsq\"\n)\n\nfunc NewNsqConsumer(topic, channel, address, mysql string, handle nsq.Handler) *nsq.Consumer {\n\tcfg := nsq.NewConfig()\n\tcfg.LookupdPollInterval = time.Second\n\tc, err := nsq.NewConsumer(topic, channel, cfg) // 新建一个消费者\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tc.SetLogger(nil, 0)\n\n\trg := &handlerRegist{\n\t\th:       handle,\n\t\ttopic:   topic,\n\t\tchannel: channel,\n\t\tnsqd:    address,\n\t}\n\tc.AddHandler(rg)                                        // 添加消费者接口\n\torm.RegisterDataBase(\"default\", \"mysql\", mysql, 10, 10) // 注册数据库\n\tif err := c.ConnectToNSQD(address); err != nil {\n\t\tpanic(err)\n\t}\n\treturn c\n}\n\ntype handlerRegist struct {\n\th       nsq.Handler\n\ttopic   string\n\tchannel string\n\tnsqd    string\n}\n\n// 对调用方的handel封装\nfunc (rg *handlerRegist) HandleMessage(message *nsq.Message) error {\n\tgo rg.ConsumeLog(message) // 不知道会不会造成gc压力\n\treturn rg.h.HandleMessage(message)\n}\n\n// 添加消费日志到mysql\nfunc (rg *handlerRegist) ConsumeLog(message *nsq.Message) (int64, error) {\n\tlog := &models.NsqConsumeLog{}\n\tlog.NsqdUrl = rg.nsqd\n\tlog.Topic = rg.topic\n\tlog.Channel = rg.channel\n\tlog.Message = string(message.Body)\n\tlog.MessageId = fmt.Sprintf(\"%s\", message.ID)\n\treturn models.AddNsqConsumeLog(log)\n}\n```\n\n该方法的优点：在不对官方项目做任何修改的前提下，就可以记录消息生命周期。\n该方法的缺点：因为nsqd的publish消息成功的时候，不会返回message_id,而且go-nsq项目的publish方法的返回值只有一个error类型，所以在记录publish日志时，无法获得message_id，这样就无法查看某一个消息的publish和consume的日志。\n\n### 方案2：修改go-nsq代码以及nsqd代码\n\n- 根据文章中的图片找到publish和consum相关部分的代码\n\n- 修改go-nsq的publish方法，额外添加一个返回值\n```\n// 没有亲自实现,代码略\n```\n\n- 修改nsqd项目的protocal.Pub方法，额外返回一个message_id\n```\n// github.com/nsqio/nsq/protocal_v2.go\nfunc (p *protocolV2) PUB(client *clientV2, params [][]byte) ([]byte, error) {\n\t// ...\n\treturn []byte(fmt.Sprintf(\"%s %s\", okBytes, msg.ID)), nil\n}\n```\n\n该方法的优点：解决了方案1的问题。\n该方法的缺点：需要修改2个官方项目，改动过大。\n\n### 方案3：只修改nsqd代码，为nsqd运行选项添加 -mysql参数\n\n- 添加publish_log\n```\n// github.com/LvBay/nsq/nsqd/topic.go\nfunc (t *Topic) put(m *Message) error {\n\tselect {\n\tcase t.memoryMsgChan <- m:\n\tdefault:\n\t\tb := bufferPoolGet()\n\t\terr := writeMessageToBackend(b, m, t.backend)\n\t\tbufferPoolPut(b)\n\t\tt.ctx.nsqd.SetHealth(err)\n\t\tif err != nil {\n\t\t\tt.ctx.nsqd.logf(LOG_ERROR,\n\t\t\t\t\"TOPIC(%s) ERROR: failed to write message to backend - %s\",\n\t\t\t\tt.name, err)\n\t\t\treturn err\n\t\t}\n\t}\n\tif t.ctx.nsqd.getOpts().MysqlUrl != \"\" {\n\t\tgo t.PublishLog(m)\n\t}\n\treturn nil\n}\n\n// github.com/LvBay/nsq/nsqd/topic.go\nfunc (t *Topic) PublishLog(m *Message) error {\n\tlog := &NsqPublishLog{}\n\tlog.Topic = t.name\n\tlog.Message = string(m.Body)\n\tlog.NsqdUrl = t.ctx.nsqd.getOpts().TCPAddress\n\tlog.MessageId = fmt.Sprintf(\"%s\", m.ID)\n\t_, err := AddNsqPublishLog(log)\n\tif err != nil {\n\t\tbeego.Error(err)\n\t}\n\treturn err\n}\n```\n\n- 添加consume_log\n```\n// github.com/LvBay/nsq/nsqd/protocol_v2.go\nfunc (p *protocolV2) messagePump(client *clientV2, startedChan chan bool) {\n\t// ...\n\n\tfor {\n\t\t// ...\n\n\t\tselect {\n\t\t// ...\n\t\tcase msg := <-memoryMsgChan:\n\t\t\tif sampleRate > 0 && rand.Int31n(100) > sampleRate {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tmsg.Attempts++\n\n\t\t\tsubChannel.StartInFlightTimeout(msg, client.ID, msgTimeout)\n\t\t\tclient.SendingMessage()\n\t\t\terr = p.SendMessage(client, msg, &buf)\n\t\t\tif err != nil {\n\t\t\t\tgoto exit\n\t\t\t}\n\t\t\t// 添加consume日志\n\t\t\tif client.ctx.nsqd.getOpts().MysqlUrl != \"\" {\n\t\t\t\tgo client.Channel.ConsumeLog(msg)\n\t\t\t}\n\t\t\tflushed = false\n\t\tcase <-client.ExitChan:\n\t\t\tgoto exit\n\t\t}\n\t}\n\nexit:\n\tp.ctx.nsqd.logf(LOG_INFO, \"PROTOCOL(V2): [%s] exiting messagePump\", client)\n\theartbeatTicker.Stop()\n\toutputBufferTicker.Stop()\n\tif err != nil {\n\t\tp.ctx.nsqd.logf(LOG_ERROR, \"PROTOCOL(V2): [%s] messagePump error - %s\", client, err)\n\t}\n}\n\n// github.com/LvBay/nsq/nsqd/channel.go\nfunc (c *Channel) ConsumeLog(m *Message) error {\n\tlog := &NsqConsumeLog{}\n\tlog.Topic = c.topicName\n\tlog.Channel = c.name\n\tlog.Message = string(m.Body)\n\tlog.NsqdUrl = c.ctx.nsqd.getOpts().TCPAddress\n\tlog.MessageId = fmt.Sprintf(\"%s\", m.ID)\n\t_, err := AddNsqConsumeLog(log)\n\tif err != nil {\n\t\tbeego.Error(err)\n\t}\n\treturn err\n}\n```\n\n- 添加 -mysql参数\n```\n// github.com/LvBay/nsq/app/nsqd/nsqd.go\nfunc nsqdFlagSet(opts *nsqd.Options) *flag.FlagSet {\n\t// ...\n\t// mysql\n\tflagSet.String(\"mysql\", opts.MysqlUrl, \"save messages in mysql\")\n\treturn flagSet\n}\n```\n\n该方法的优点：解决了方案1中message_id的问题，同时也只修改了nsqd组件。\n该方法的缺点：因为需要与mysql交互，在nsqd项目中加入了beego的orm模块代码，对nsqd项目入侵较严重。\n\n## 总结\n我们团队最终采用了第三种方案,接下来准备配合前端同学修改nsqdadmin组件,将消息历史展示在管理页面","source":"_posts/nsqd-mysql保存消息历史.md","raw":"---\ntitle: nsqd+mysql保存消息历史\ndate: 2018-02-26 15:33:48\ntags: nsq\n---\n{% asset_img nsqd.png nsqd消息分发流程%}\n\n## 改造原因\nnsqd自带消息持久化特性（nsqd的消费者因为某些原因断掉，在重新连接后仍然可以继续消费）。团队使用nsqd作为消息队列时，遇到一些问题：虽然nsqd自带消息持久化特性（nsqd的消费者因为某些原因断掉，在重新连接后仍然可以继续消费），也可以通过nsqadmin管理页面查看nsq各个节点的运行情况，但无法了解具体某个消息的生命周期。如果能将nsqd的推送记录和消费记录保存在mysql中，则可以解决痛点。\n\n## 尝试解决方案\n### 方案1：对go-nsq进行简单封装\n\n- 在gopath下,新建znsq目录,作为项目包\n{% asset_img znsq_dir.png znsq项目目录%}\n\n- 对生产者的封装\n```\npackage znsq\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"znsq/models\"\n\n\t\"github.com/astaxie/beego/orm\"\n\t\"github.com/nsqio/go-nsq\"\n)\n\ntype Producer struct {\n\tP *nsq.Producer\n}\n\n// 初始化生产者\nfunc NewProducer(addr string, mysql string) (wr *Producer) {\n\tvar err error\n\tcfg := nsq.NewConfig()\n\tp, err := nsq.NewProducer(addr, cfg)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tp.SetLogger(log.New(os.Stdout, \"nsq:\", 0), nsq.LogLevelInfo)\n\twr = &Producer{P: p}\n\torm.RegisterDataBase(\"default\", \"mysql\", mysql, 10, 10) // 注册数据库\n\treturn wr\n}\n\n// 对go-nsq的Publish方法封装\nfunc (p *Producer) Publish(topic string, body []byte) error {\n\tgo p.PublishLog(topic, body) // 添加日志\n\treturn p.P.Publish(topic, body)\n}\n\nfunc (p *Producer) PublishLog(topic string, body []byte) (int64, error) {\n\tlog := &models.NsqPublishLog{}\n\t// log.MessageId = \"\" // 因为messageId由nsqd生成,所以这里还无法获取messageId\n\tlog.Message = string(body)\n\tlog.NsqdUrl = p.P.String()\n\tlog.Topic = topic\n\treturn models.AddNsqPublishLog(log)\n}\n```\n\n- 对消费者的封装\n```\npackage znsq\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"znsq/models\"\n\n\t\"github.com/astaxie/beego/orm\"\n\t_ \"github.com/go-sql-driver/mysql\"\n\tnsq \"github.com/nsqio/go-nsq\"\n)\n\nfunc NewNsqConsumer(topic, channel, address, mysql string, handle nsq.Handler) *nsq.Consumer {\n\tcfg := nsq.NewConfig()\n\tcfg.LookupdPollInterval = time.Second\n\tc, err := nsq.NewConsumer(topic, channel, cfg) // 新建一个消费者\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tc.SetLogger(nil, 0)\n\n\trg := &handlerRegist{\n\t\th:       handle,\n\t\ttopic:   topic,\n\t\tchannel: channel,\n\t\tnsqd:    address,\n\t}\n\tc.AddHandler(rg)                                        // 添加消费者接口\n\torm.RegisterDataBase(\"default\", \"mysql\", mysql, 10, 10) // 注册数据库\n\tif err := c.ConnectToNSQD(address); err != nil {\n\t\tpanic(err)\n\t}\n\treturn c\n}\n\ntype handlerRegist struct {\n\th       nsq.Handler\n\ttopic   string\n\tchannel string\n\tnsqd    string\n}\n\n// 对调用方的handel封装\nfunc (rg *handlerRegist) HandleMessage(message *nsq.Message) error {\n\tgo rg.ConsumeLog(message) // 不知道会不会造成gc压力\n\treturn rg.h.HandleMessage(message)\n}\n\n// 添加消费日志到mysql\nfunc (rg *handlerRegist) ConsumeLog(message *nsq.Message) (int64, error) {\n\tlog := &models.NsqConsumeLog{}\n\tlog.NsqdUrl = rg.nsqd\n\tlog.Topic = rg.topic\n\tlog.Channel = rg.channel\n\tlog.Message = string(message.Body)\n\tlog.MessageId = fmt.Sprintf(\"%s\", message.ID)\n\treturn models.AddNsqConsumeLog(log)\n}\n```\n\n该方法的优点：在不对官方项目做任何修改的前提下，就可以记录消息生命周期。\n该方法的缺点：因为nsqd的publish消息成功的时候，不会返回message_id,而且go-nsq项目的publish方法的返回值只有一个error类型，所以在记录publish日志时，无法获得message_id，这样就无法查看某一个消息的publish和consume的日志。\n\n### 方案2：修改go-nsq代码以及nsqd代码\n\n- 根据文章中的图片找到publish和consum相关部分的代码\n\n- 修改go-nsq的publish方法，额外添加一个返回值\n```\n// 没有亲自实现,代码略\n```\n\n- 修改nsqd项目的protocal.Pub方法，额外返回一个message_id\n```\n// github.com/nsqio/nsq/protocal_v2.go\nfunc (p *protocolV2) PUB(client *clientV2, params [][]byte) ([]byte, error) {\n\t// ...\n\treturn []byte(fmt.Sprintf(\"%s %s\", okBytes, msg.ID)), nil\n}\n```\n\n该方法的优点：解决了方案1的问题。\n该方法的缺点：需要修改2个官方项目，改动过大。\n\n### 方案3：只修改nsqd代码，为nsqd运行选项添加 -mysql参数\n\n- 添加publish_log\n```\n// github.com/LvBay/nsq/nsqd/topic.go\nfunc (t *Topic) put(m *Message) error {\n\tselect {\n\tcase t.memoryMsgChan <- m:\n\tdefault:\n\t\tb := bufferPoolGet()\n\t\terr := writeMessageToBackend(b, m, t.backend)\n\t\tbufferPoolPut(b)\n\t\tt.ctx.nsqd.SetHealth(err)\n\t\tif err != nil {\n\t\t\tt.ctx.nsqd.logf(LOG_ERROR,\n\t\t\t\t\"TOPIC(%s) ERROR: failed to write message to backend - %s\",\n\t\t\t\tt.name, err)\n\t\t\treturn err\n\t\t}\n\t}\n\tif t.ctx.nsqd.getOpts().MysqlUrl != \"\" {\n\t\tgo t.PublishLog(m)\n\t}\n\treturn nil\n}\n\n// github.com/LvBay/nsq/nsqd/topic.go\nfunc (t *Topic) PublishLog(m *Message) error {\n\tlog := &NsqPublishLog{}\n\tlog.Topic = t.name\n\tlog.Message = string(m.Body)\n\tlog.NsqdUrl = t.ctx.nsqd.getOpts().TCPAddress\n\tlog.MessageId = fmt.Sprintf(\"%s\", m.ID)\n\t_, err := AddNsqPublishLog(log)\n\tif err != nil {\n\t\tbeego.Error(err)\n\t}\n\treturn err\n}\n```\n\n- 添加consume_log\n```\n// github.com/LvBay/nsq/nsqd/protocol_v2.go\nfunc (p *protocolV2) messagePump(client *clientV2, startedChan chan bool) {\n\t// ...\n\n\tfor {\n\t\t// ...\n\n\t\tselect {\n\t\t// ...\n\t\tcase msg := <-memoryMsgChan:\n\t\t\tif sampleRate > 0 && rand.Int31n(100) > sampleRate {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tmsg.Attempts++\n\n\t\t\tsubChannel.StartInFlightTimeout(msg, client.ID, msgTimeout)\n\t\t\tclient.SendingMessage()\n\t\t\terr = p.SendMessage(client, msg, &buf)\n\t\t\tif err != nil {\n\t\t\t\tgoto exit\n\t\t\t}\n\t\t\t// 添加consume日志\n\t\t\tif client.ctx.nsqd.getOpts().MysqlUrl != \"\" {\n\t\t\t\tgo client.Channel.ConsumeLog(msg)\n\t\t\t}\n\t\t\tflushed = false\n\t\tcase <-client.ExitChan:\n\t\t\tgoto exit\n\t\t}\n\t}\n\nexit:\n\tp.ctx.nsqd.logf(LOG_INFO, \"PROTOCOL(V2): [%s] exiting messagePump\", client)\n\theartbeatTicker.Stop()\n\toutputBufferTicker.Stop()\n\tif err != nil {\n\t\tp.ctx.nsqd.logf(LOG_ERROR, \"PROTOCOL(V2): [%s] messagePump error - %s\", client, err)\n\t}\n}\n\n// github.com/LvBay/nsq/nsqd/channel.go\nfunc (c *Channel) ConsumeLog(m *Message) error {\n\tlog := &NsqConsumeLog{}\n\tlog.Topic = c.topicName\n\tlog.Channel = c.name\n\tlog.Message = string(m.Body)\n\tlog.NsqdUrl = c.ctx.nsqd.getOpts().TCPAddress\n\tlog.MessageId = fmt.Sprintf(\"%s\", m.ID)\n\t_, err := AddNsqConsumeLog(log)\n\tif err != nil {\n\t\tbeego.Error(err)\n\t}\n\treturn err\n}\n```\n\n- 添加 -mysql参数\n```\n// github.com/LvBay/nsq/app/nsqd/nsqd.go\nfunc nsqdFlagSet(opts *nsqd.Options) *flag.FlagSet {\n\t// ...\n\t// mysql\n\tflagSet.String(\"mysql\", opts.MysqlUrl, \"save messages in mysql\")\n\treturn flagSet\n}\n```\n\n该方法的优点：解决了方案1中message_id的问题，同时也只修改了nsqd组件。\n该方法的缺点：因为需要与mysql交互，在nsqd项目中加入了beego的orm模块代码，对nsqd项目入侵较严重。\n\n## 总结\n我们团队最终采用了第三种方案,接下来准备配合前端同学修改nsqdadmin组件,将消息历史展示在管理页面","slug":"nsqd-mysql保存消息历史","published":1,"updated":"2018-02-27T04:42:23.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cje56yeh30001r0x4bxm2sifk","content":"<img src=\"/2018/02/26/nsqd-mysql保存消息历史/nsqd.png\" title=\"nsqd消息分发流程\">\n<h2 id=\"改造原因\"><a href=\"#改造原因\" class=\"headerlink\" title=\"改造原因\"></a>改造原因</h2><p>nsqd自带消息持久化特性（nsqd的消费者因为某些原因断掉，在重新连接后仍然可以继续消费）。团队使用nsqd作为消息队列时，遇到一些问题：虽然nsqd自带消息持久化特性（nsqd的消费者因为某些原因断掉，在重新连接后仍然可以继续消费），也可以通过nsqadmin管理页面查看nsq各个节点的运行情况，但无法了解具体某个消息的生命周期。如果能将nsqd的推送记录和消费记录保存在mysql中，则可以解决痛点。</p>\n<h2 id=\"尝试解决方案\"><a href=\"#尝试解决方案\" class=\"headerlink\" title=\"尝试解决方案\"></a>尝试解决方案</h2><h3 id=\"方案1：对go-nsq进行简单封装\"><a href=\"#方案1：对go-nsq进行简单封装\" class=\"headerlink\" title=\"方案1：对go-nsq进行简单封装\"></a>方案1：对go-nsq进行简单封装</h3><ul>\n<li><p>在gopath下,新建znsq目录,作为项目包</p>\n<img src=\"/2018/02/26/nsqd-mysql保存消息历史/znsq_dir.png\" title=\"znsq项目目录\">\n</li>\n<li><p>对生产者的封装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package znsq</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;znsq/models&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;github.com/astaxie/beego/orm&quot;</span><br><span class=\"line\">\t&quot;github.com/nsqio/go-nsq&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Producer struct &#123;</span><br><span class=\"line\">\tP *nsq.Producer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 初始化生产者</span><br><span class=\"line\">func NewProducer(addr string, mysql string) (wr *Producer) &#123;</span><br><span class=\"line\">\tvar err error</span><br><span class=\"line\">\tcfg := nsq.NewConfig()</span><br><span class=\"line\">\tp, err := nsq.NewProducer(addr, cfg)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tpanic(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tp.SetLogger(log.New(os.Stdout, &quot;nsq:&quot;, 0), nsq.LogLevelInfo)</span><br><span class=\"line\">\twr = &amp;Producer&#123;P: p&#125;</span><br><span class=\"line\">\torm.RegisterDataBase(&quot;default&quot;, &quot;mysql&quot;, mysql, 10, 10) // 注册数据库</span><br><span class=\"line\">\treturn wr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 对go-nsq的Publish方法封装</span><br><span class=\"line\">func (p *Producer) Publish(topic string, body []byte) error &#123;</span><br><span class=\"line\">\tgo p.PublishLog(topic, body) // 添加日志</span><br><span class=\"line\">\treturn p.P.Publish(topic, body)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (p *Producer) PublishLog(topic string, body []byte) (int64, error) &#123;</span><br><span class=\"line\">\tlog := &amp;models.NsqPublishLog&#123;&#125;</span><br><span class=\"line\">\t// log.MessageId = &quot;&quot; // 因为messageId由nsqd生成,所以这里还无法获取messageId</span><br><span class=\"line\">\tlog.Message = string(body)</span><br><span class=\"line\">\tlog.NsqdUrl = p.P.String()</span><br><span class=\"line\">\tlog.Topic = topic</span><br><span class=\"line\">\treturn models.AddNsqPublishLog(log)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对消费者的封装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package znsq</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">\t&quot;znsq/models&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;github.com/astaxie/beego/orm&quot;</span><br><span class=\"line\">\t_ &quot;github.com/go-sql-driver/mysql&quot;</span><br><span class=\"line\">\tnsq &quot;github.com/nsqio/go-nsq&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func NewNsqConsumer(topic, channel, address, mysql string, handle nsq.Handler) *nsq.Consumer &#123;</span><br><span class=\"line\">\tcfg := nsq.NewConfig()</span><br><span class=\"line\">\tcfg.LookupdPollInterval = time.Second</span><br><span class=\"line\">\tc, err := nsq.NewConsumer(topic, channel, cfg) // 新建一个消费者</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tpanic(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.SetLogger(nil, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">\trg := &amp;handlerRegist&#123;</span><br><span class=\"line\">\t\th:       handle,</span><br><span class=\"line\">\t\ttopic:   topic,</span><br><span class=\"line\">\t\tchannel: channel,</span><br><span class=\"line\">\t\tnsqd:    address,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.AddHandler(rg)                                        // 添加消费者接口</span><br><span class=\"line\">\torm.RegisterDataBase(&quot;default&quot;, &quot;mysql&quot;, mysql, 10, 10) // 注册数据库</span><br><span class=\"line\">\tif err := c.ConnectToNSQD(address); err != nil &#123;</span><br><span class=\"line\">\t\tpanic(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type handlerRegist struct &#123;</span><br><span class=\"line\">\th       nsq.Handler</span><br><span class=\"line\">\ttopic   string</span><br><span class=\"line\">\tchannel string</span><br><span class=\"line\">\tnsqd    string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 对调用方的handel封装</span><br><span class=\"line\">func (rg *handlerRegist) HandleMessage(message *nsq.Message) error &#123;</span><br><span class=\"line\">\tgo rg.ConsumeLog(message) // 不知道会不会造成gc压力</span><br><span class=\"line\">\treturn rg.h.HandleMessage(message)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 添加消费日志到mysql</span><br><span class=\"line\">func (rg *handlerRegist) ConsumeLog(message *nsq.Message) (int64, error) &#123;</span><br><span class=\"line\">\tlog := &amp;models.NsqConsumeLog&#123;&#125;</span><br><span class=\"line\">\tlog.NsqdUrl = rg.nsqd</span><br><span class=\"line\">\tlog.Topic = rg.topic</span><br><span class=\"line\">\tlog.Channel = rg.channel</span><br><span class=\"line\">\tlog.Message = string(message.Body)</span><br><span class=\"line\">\tlog.MessageId = fmt.Sprintf(&quot;%s&quot;, message.ID)</span><br><span class=\"line\">\treturn models.AddNsqConsumeLog(log)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>该方法的优点：在不对官方项目做任何修改的前提下，就可以记录消息生命周期。<br>该方法的缺点：因为nsqd的publish消息成功的时候，不会返回message_id,而且go-nsq项目的publish方法的返回值只有一个error类型，所以在记录publish日志时，无法获得message_id，这样就无法查看某一个消息的publish和consume的日志。</p>\n<h3 id=\"方案2：修改go-nsq代码以及nsqd代码\"><a href=\"#方案2：修改go-nsq代码以及nsqd代码\" class=\"headerlink\" title=\"方案2：修改go-nsq代码以及nsqd代码\"></a>方案2：修改go-nsq代码以及nsqd代码</h3><ul>\n<li><p>根据文章中的图片找到publish和consum相关部分的代码</p>\n</li>\n<li><p>修改go-nsq的publish方法，额外添加一个返回值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 没有亲自实现,代码略</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改nsqd项目的protocal.Pub方法，额外返回一个message_id</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// github.com/nsqio/nsq/protocal_v2.go</span><br><span class=\"line\">func (p *protocolV2) PUB(client *clientV2, params [][]byte) ([]byte, error) &#123;</span><br><span class=\"line\">\t// ...</span><br><span class=\"line\">\treturn []byte(fmt.Sprintf(&quot;%s %s&quot;, okBytes, msg.ID)), nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>该方法的优点：解决了方案1的问题。<br>该方法的缺点：需要修改2个官方项目，改动过大。</p>\n<h3 id=\"方案3：只修改nsqd代码，为nsqd运行选项添加-mysql参数\"><a href=\"#方案3：只修改nsqd代码，为nsqd运行选项添加-mysql参数\" class=\"headerlink\" title=\"方案3：只修改nsqd代码，为nsqd运行选项添加 -mysql参数\"></a>方案3：只修改nsqd代码，为nsqd运行选项添加 -mysql参数</h3><ul>\n<li><p>添加publish_log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// github.com/LvBay/nsq/nsqd/topic.go</span><br><span class=\"line\">func (t *Topic) put(m *Message) error &#123;</span><br><span class=\"line\">\tselect &#123;</span><br><span class=\"line\">\tcase t.memoryMsgChan &lt;- m:</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\tb := bufferPoolGet()</span><br><span class=\"line\">\t\terr := writeMessageToBackend(b, m, t.backend)</span><br><span class=\"line\">\t\tbufferPoolPut(b)</span><br><span class=\"line\">\t\tt.ctx.nsqd.SetHealth(err)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tt.ctx.nsqd.logf(LOG_ERROR,</span><br><span class=\"line\">\t\t\t\t&quot;TOPIC(%s) ERROR: failed to write message to backend - %s&quot;,</span><br><span class=\"line\">\t\t\t\tt.name, err)</span><br><span class=\"line\">\t\t\treturn err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif t.ctx.nsqd.getOpts().MysqlUrl != &quot;&quot; &#123;</span><br><span class=\"line\">\t\tgo t.PublishLog(m)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// github.com/LvBay/nsq/nsqd/topic.go</span><br><span class=\"line\">func (t *Topic) PublishLog(m *Message) error &#123;</span><br><span class=\"line\">\tlog := &amp;NsqPublishLog&#123;&#125;</span><br><span class=\"line\">\tlog.Topic = t.name</span><br><span class=\"line\">\tlog.Message = string(m.Body)</span><br><span class=\"line\">\tlog.NsqdUrl = t.ctx.nsqd.getOpts().TCPAddress</span><br><span class=\"line\">\tlog.MessageId = fmt.Sprintf(&quot;%s&quot;, m.ID)</span><br><span class=\"line\">\t_, err := AddNsqPublishLog(log)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tbeego.Error(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加consume_log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// github.com/LvBay/nsq/nsqd/protocol_v2.go</span><br><span class=\"line\">func (p *protocolV2) messagePump(client *clientV2, startedChan chan bool) &#123;</span><br><span class=\"line\">\t// ...</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\t// ...</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tselect &#123;</span><br><span class=\"line\">\t\t// ...</span><br><span class=\"line\">\t\tcase msg := &lt;-memoryMsgChan:</span><br><span class=\"line\">\t\t\tif sampleRate &gt; 0 &amp;&amp; rand.Int31n(100) &gt; sampleRate &#123;</span><br><span class=\"line\">\t\t\t\tcontinue</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tmsg.Attempts++</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tsubChannel.StartInFlightTimeout(msg, client.ID, msgTimeout)</span><br><span class=\"line\">\t\t\tclient.SendingMessage()</span><br><span class=\"line\">\t\t\terr = p.SendMessage(client, msg, &amp;buf)</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\tgoto exit</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t// 添加consume日志</span><br><span class=\"line\">\t\t\tif client.ctx.nsqd.getOpts().MysqlUrl != &quot;&quot; &#123;</span><br><span class=\"line\">\t\t\t\tgo client.Channel.ConsumeLog(msg)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tflushed = false</span><br><span class=\"line\">\t\tcase &lt;-client.ExitChan:</span><br><span class=\"line\">\t\t\tgoto exit</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exit:</span><br><span class=\"line\">\tp.ctx.nsqd.logf(LOG_INFO, &quot;PROTOCOL(V2): [%s] exiting messagePump&quot;, client)</span><br><span class=\"line\">\theartbeatTicker.Stop()</span><br><span class=\"line\">\toutputBufferTicker.Stop()</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tp.ctx.nsqd.logf(LOG_ERROR, &quot;PROTOCOL(V2): [%s] messagePump error - %s&quot;, client, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// github.com/LvBay/nsq/nsqd/channel.go</span><br><span class=\"line\">func (c *Channel) ConsumeLog(m *Message) error &#123;</span><br><span class=\"line\">\tlog := &amp;NsqConsumeLog&#123;&#125;</span><br><span class=\"line\">\tlog.Topic = c.topicName</span><br><span class=\"line\">\tlog.Channel = c.name</span><br><span class=\"line\">\tlog.Message = string(m.Body)</span><br><span class=\"line\">\tlog.NsqdUrl = c.ctx.nsqd.getOpts().TCPAddress</span><br><span class=\"line\">\tlog.MessageId = fmt.Sprintf(&quot;%s&quot;, m.ID)</span><br><span class=\"line\">\t_, err := AddNsqConsumeLog(log)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tbeego.Error(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加 -mysql参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// github.com/LvBay/nsq/app/nsqd/nsqd.go</span><br><span class=\"line\">func nsqdFlagSet(opts *nsqd.Options) *flag.FlagSet &#123;</span><br><span class=\"line\">\t// ...</span><br><span class=\"line\">\t// mysql</span><br><span class=\"line\">\tflagSet.String(&quot;mysql&quot;, opts.MysqlUrl, &quot;save messages in mysql&quot;)</span><br><span class=\"line\">\treturn flagSet</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>该方法的优点：解决了方案1中message_id的问题，同时也只修改了nsqd组件。<br>该方法的缺点：因为需要与mysql交互，在nsqd项目中加入了beego的orm模块代码，对nsqd项目入侵较严重。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们团队最终采用了第三种方案,接下来准备配合前端同学修改nsqdadmin组件,将消息历史展示在管理页面</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2018/02/26/nsqd-mysql保存消息历史/nsqd.png\" title=\"nsqd消息分发流程\">\n<h2 id=\"改造原因\"><a href=\"#改造原因\" class=\"headerlink\" title=\"改造原因\"></a>改造原因</h2><p>nsqd自带消息持久化特性（nsqd的消费者因为某些原因断掉，在重新连接后仍然可以继续消费）。团队使用nsqd作为消息队列时，遇到一些问题：虽然nsqd自带消息持久化特性（nsqd的消费者因为某些原因断掉，在重新连接后仍然可以继续消费），也可以通过nsqadmin管理页面查看nsq各个节点的运行情况，但无法了解具体某个消息的生命周期。如果能将nsqd的推送记录和消费记录保存在mysql中，则可以解决痛点。</p>\n<h2 id=\"尝试解决方案\"><a href=\"#尝试解决方案\" class=\"headerlink\" title=\"尝试解决方案\"></a>尝试解决方案</h2><h3 id=\"方案1：对go-nsq进行简单封装\"><a href=\"#方案1：对go-nsq进行简单封装\" class=\"headerlink\" title=\"方案1：对go-nsq进行简单封装\"></a>方案1：对go-nsq进行简单封装</h3><ul>\n<li><p>在gopath下,新建znsq目录,作为项目包</p>\n<img src=\"/2018/02/26/nsqd-mysql保存消息历史/znsq_dir.png\" title=\"znsq项目目录\">\n</li>\n<li><p>对生产者的封装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package znsq</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;znsq/models&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;github.com/astaxie/beego/orm&quot;</span><br><span class=\"line\">\t&quot;github.com/nsqio/go-nsq&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Producer struct &#123;</span><br><span class=\"line\">\tP *nsq.Producer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 初始化生产者</span><br><span class=\"line\">func NewProducer(addr string, mysql string) (wr *Producer) &#123;</span><br><span class=\"line\">\tvar err error</span><br><span class=\"line\">\tcfg := nsq.NewConfig()</span><br><span class=\"line\">\tp, err := nsq.NewProducer(addr, cfg)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tpanic(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tp.SetLogger(log.New(os.Stdout, &quot;nsq:&quot;, 0), nsq.LogLevelInfo)</span><br><span class=\"line\">\twr = &amp;Producer&#123;P: p&#125;</span><br><span class=\"line\">\torm.RegisterDataBase(&quot;default&quot;, &quot;mysql&quot;, mysql, 10, 10) // 注册数据库</span><br><span class=\"line\">\treturn wr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 对go-nsq的Publish方法封装</span><br><span class=\"line\">func (p *Producer) Publish(topic string, body []byte) error &#123;</span><br><span class=\"line\">\tgo p.PublishLog(topic, body) // 添加日志</span><br><span class=\"line\">\treturn p.P.Publish(topic, body)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (p *Producer) PublishLog(topic string, body []byte) (int64, error) &#123;</span><br><span class=\"line\">\tlog := &amp;models.NsqPublishLog&#123;&#125;</span><br><span class=\"line\">\t// log.MessageId = &quot;&quot; // 因为messageId由nsqd生成,所以这里还无法获取messageId</span><br><span class=\"line\">\tlog.Message = string(body)</span><br><span class=\"line\">\tlog.NsqdUrl = p.P.String()</span><br><span class=\"line\">\tlog.Topic = topic</span><br><span class=\"line\">\treturn models.AddNsqPublishLog(log)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对消费者的封装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package znsq</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">\t&quot;znsq/models&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;github.com/astaxie/beego/orm&quot;</span><br><span class=\"line\">\t_ &quot;github.com/go-sql-driver/mysql&quot;</span><br><span class=\"line\">\tnsq &quot;github.com/nsqio/go-nsq&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func NewNsqConsumer(topic, channel, address, mysql string, handle nsq.Handler) *nsq.Consumer &#123;</span><br><span class=\"line\">\tcfg := nsq.NewConfig()</span><br><span class=\"line\">\tcfg.LookupdPollInterval = time.Second</span><br><span class=\"line\">\tc, err := nsq.NewConsumer(topic, channel, cfg) // 新建一个消费者</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tpanic(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.SetLogger(nil, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">\trg := &amp;handlerRegist&#123;</span><br><span class=\"line\">\t\th:       handle,</span><br><span class=\"line\">\t\ttopic:   topic,</span><br><span class=\"line\">\t\tchannel: channel,</span><br><span class=\"line\">\t\tnsqd:    address,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.AddHandler(rg)                                        // 添加消费者接口</span><br><span class=\"line\">\torm.RegisterDataBase(&quot;default&quot;, &quot;mysql&quot;, mysql, 10, 10) // 注册数据库</span><br><span class=\"line\">\tif err := c.ConnectToNSQD(address); err != nil &#123;</span><br><span class=\"line\">\t\tpanic(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type handlerRegist struct &#123;</span><br><span class=\"line\">\th       nsq.Handler</span><br><span class=\"line\">\ttopic   string</span><br><span class=\"line\">\tchannel string</span><br><span class=\"line\">\tnsqd    string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 对调用方的handel封装</span><br><span class=\"line\">func (rg *handlerRegist) HandleMessage(message *nsq.Message) error &#123;</span><br><span class=\"line\">\tgo rg.ConsumeLog(message) // 不知道会不会造成gc压力</span><br><span class=\"line\">\treturn rg.h.HandleMessage(message)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 添加消费日志到mysql</span><br><span class=\"line\">func (rg *handlerRegist) ConsumeLog(message *nsq.Message) (int64, error) &#123;</span><br><span class=\"line\">\tlog := &amp;models.NsqConsumeLog&#123;&#125;</span><br><span class=\"line\">\tlog.NsqdUrl = rg.nsqd</span><br><span class=\"line\">\tlog.Topic = rg.topic</span><br><span class=\"line\">\tlog.Channel = rg.channel</span><br><span class=\"line\">\tlog.Message = string(message.Body)</span><br><span class=\"line\">\tlog.MessageId = fmt.Sprintf(&quot;%s&quot;, message.ID)</span><br><span class=\"line\">\treturn models.AddNsqConsumeLog(log)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>该方法的优点：在不对官方项目做任何修改的前提下，就可以记录消息生命周期。<br>该方法的缺点：因为nsqd的publish消息成功的时候，不会返回message_id,而且go-nsq项目的publish方法的返回值只有一个error类型，所以在记录publish日志时，无法获得message_id，这样就无法查看某一个消息的publish和consume的日志。</p>\n<h3 id=\"方案2：修改go-nsq代码以及nsqd代码\"><a href=\"#方案2：修改go-nsq代码以及nsqd代码\" class=\"headerlink\" title=\"方案2：修改go-nsq代码以及nsqd代码\"></a>方案2：修改go-nsq代码以及nsqd代码</h3><ul>\n<li><p>根据文章中的图片找到publish和consum相关部分的代码</p>\n</li>\n<li><p>修改go-nsq的publish方法，额外添加一个返回值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 没有亲自实现,代码略</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改nsqd项目的protocal.Pub方法，额外返回一个message_id</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// github.com/nsqio/nsq/protocal_v2.go</span><br><span class=\"line\">func (p *protocolV2) PUB(client *clientV2, params [][]byte) ([]byte, error) &#123;</span><br><span class=\"line\">\t// ...</span><br><span class=\"line\">\treturn []byte(fmt.Sprintf(&quot;%s %s&quot;, okBytes, msg.ID)), nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>该方法的优点：解决了方案1的问题。<br>该方法的缺点：需要修改2个官方项目，改动过大。</p>\n<h3 id=\"方案3：只修改nsqd代码，为nsqd运行选项添加-mysql参数\"><a href=\"#方案3：只修改nsqd代码，为nsqd运行选项添加-mysql参数\" class=\"headerlink\" title=\"方案3：只修改nsqd代码，为nsqd运行选项添加 -mysql参数\"></a>方案3：只修改nsqd代码，为nsqd运行选项添加 -mysql参数</h3><ul>\n<li><p>添加publish_log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// github.com/LvBay/nsq/nsqd/topic.go</span><br><span class=\"line\">func (t *Topic) put(m *Message) error &#123;</span><br><span class=\"line\">\tselect &#123;</span><br><span class=\"line\">\tcase t.memoryMsgChan &lt;- m:</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\tb := bufferPoolGet()</span><br><span class=\"line\">\t\terr := writeMessageToBackend(b, m, t.backend)</span><br><span class=\"line\">\t\tbufferPoolPut(b)</span><br><span class=\"line\">\t\tt.ctx.nsqd.SetHealth(err)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tt.ctx.nsqd.logf(LOG_ERROR,</span><br><span class=\"line\">\t\t\t\t&quot;TOPIC(%s) ERROR: failed to write message to backend - %s&quot;,</span><br><span class=\"line\">\t\t\t\tt.name, err)</span><br><span class=\"line\">\t\t\treturn err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif t.ctx.nsqd.getOpts().MysqlUrl != &quot;&quot; &#123;</span><br><span class=\"line\">\t\tgo t.PublishLog(m)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// github.com/LvBay/nsq/nsqd/topic.go</span><br><span class=\"line\">func (t *Topic) PublishLog(m *Message) error &#123;</span><br><span class=\"line\">\tlog := &amp;NsqPublishLog&#123;&#125;</span><br><span class=\"line\">\tlog.Topic = t.name</span><br><span class=\"line\">\tlog.Message = string(m.Body)</span><br><span class=\"line\">\tlog.NsqdUrl = t.ctx.nsqd.getOpts().TCPAddress</span><br><span class=\"line\">\tlog.MessageId = fmt.Sprintf(&quot;%s&quot;, m.ID)</span><br><span class=\"line\">\t_, err := AddNsqPublishLog(log)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tbeego.Error(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加consume_log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// github.com/LvBay/nsq/nsqd/protocol_v2.go</span><br><span class=\"line\">func (p *protocolV2) messagePump(client *clientV2, startedChan chan bool) &#123;</span><br><span class=\"line\">\t// ...</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\t// ...</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tselect &#123;</span><br><span class=\"line\">\t\t// ...</span><br><span class=\"line\">\t\tcase msg := &lt;-memoryMsgChan:</span><br><span class=\"line\">\t\t\tif sampleRate &gt; 0 &amp;&amp; rand.Int31n(100) &gt; sampleRate &#123;</span><br><span class=\"line\">\t\t\t\tcontinue</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tmsg.Attempts++</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tsubChannel.StartInFlightTimeout(msg, client.ID, msgTimeout)</span><br><span class=\"line\">\t\t\tclient.SendingMessage()</span><br><span class=\"line\">\t\t\terr = p.SendMessage(client, msg, &amp;buf)</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\tgoto exit</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t// 添加consume日志</span><br><span class=\"line\">\t\t\tif client.ctx.nsqd.getOpts().MysqlUrl != &quot;&quot; &#123;</span><br><span class=\"line\">\t\t\t\tgo client.Channel.ConsumeLog(msg)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tflushed = false</span><br><span class=\"line\">\t\tcase &lt;-client.ExitChan:</span><br><span class=\"line\">\t\t\tgoto exit</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exit:</span><br><span class=\"line\">\tp.ctx.nsqd.logf(LOG_INFO, &quot;PROTOCOL(V2): [%s] exiting messagePump&quot;, client)</span><br><span class=\"line\">\theartbeatTicker.Stop()</span><br><span class=\"line\">\toutputBufferTicker.Stop()</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tp.ctx.nsqd.logf(LOG_ERROR, &quot;PROTOCOL(V2): [%s] messagePump error - %s&quot;, client, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// github.com/LvBay/nsq/nsqd/channel.go</span><br><span class=\"line\">func (c *Channel) ConsumeLog(m *Message) error &#123;</span><br><span class=\"line\">\tlog := &amp;NsqConsumeLog&#123;&#125;</span><br><span class=\"line\">\tlog.Topic = c.topicName</span><br><span class=\"line\">\tlog.Channel = c.name</span><br><span class=\"line\">\tlog.Message = string(m.Body)</span><br><span class=\"line\">\tlog.NsqdUrl = c.ctx.nsqd.getOpts().TCPAddress</span><br><span class=\"line\">\tlog.MessageId = fmt.Sprintf(&quot;%s&quot;, m.ID)</span><br><span class=\"line\">\t_, err := AddNsqConsumeLog(log)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tbeego.Error(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加 -mysql参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// github.com/LvBay/nsq/app/nsqd/nsqd.go</span><br><span class=\"line\">func nsqdFlagSet(opts *nsqd.Options) *flag.FlagSet &#123;</span><br><span class=\"line\">\t// ...</span><br><span class=\"line\">\t// mysql</span><br><span class=\"line\">\tflagSet.String(&quot;mysql&quot;, opts.MysqlUrl, &quot;save messages in mysql&quot;)</span><br><span class=\"line\">\treturn flagSet</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>该方法的优点：解决了方案1中message_id的问题，同时也只修改了nsqd组件。<br>该方法的缺点：因为需要与mysql交互，在nsqd项目中加入了beego的orm模块代码，对nsqd项目入侵较严重。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们团队最终采用了第三种方案,接下来准备配合前端同学修改nsqdadmin组件,将消息历史展示在管理页面</p>\n"}],"PostAsset":[{"_id":"source/_posts/nsqd-mysql保存消息历史/nsqd.png","post":"cje56yeh30001r0x4bxm2sifk","slug":"nsqd.png","modified":1,"renderable":1},{"_id":"source/_posts/nsqd-mysql保存消息历史/znsq_dir.png","post":"cje56yeh30001r0x4bxm2sifk","slug":"znsq_dir.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cje56yeh30001r0x4bxm2sifk","tag_id":"cje56yehe0002r0x4pkl7ezm8","_id":"cje56yehh0003r0x4a94i5jo9"}],"Tag":[{"name":"nsq","_id":"cje56yehe0002r0x4pkl7ezm8"}]}}